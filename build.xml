<?xml version ="1.0"?>

<!--Ant Script for create Build for Common package-->
<project name="CommonPackage" default="compile">
	
	<!--define require dir and Properties -->	
	<property name="base.dir" value="."/>
    <property name="src.dir" value="${base.dir}/src"/>
    <property name="test.dir" value="${base.dir}/test"/>
    <property name="target.dir" value="${base.dir}/classes"/>
    <property name="lib.dir" value="${base.dir}/lib"/>
    <property name="build.dir" value="${base.dir}/build"/>
    <property name="applet.dir" value="${base.dir}/Applet"/>
	<property name="hbm.dir" value="${src.dir}/edu/wustl/common/hbm"/>
	<property name="extra_lib.dir" value="${base.dir}/extra_lib"/>
	<property name="generateforce" value="true"/>
    <property name="junit.dir" value="${base.dir}/junit"/>
    <property name="junit.report.dir" value="${junit.dir}/reports"/>
    <property name="junit.classes.dir" value="${junit.dir}/classes"/>
	
	<!--Properties set for checkstyle "Tools that generate report of code convention violations"-->
	<property name="checkstyle.dir" value="${base.dir}/checkstyle"/>
	<property name="checkstyle.rules.file" value="${checkstyle.dir}/CheckStyleRules.xml"/>
	<property name="checkstyle.report.formatter" value="${checkstyle.dir}/report_formatter/checkstyle-simple.xsl"/>
	<property name="checkstyle.report.dir" value="${checkstyle.dir}/checkstyle_reports"/>
	<property name="checkstyle.unformatted.report" value="${checkstyle.report.dir}/checkstyle_report.xml"/>
	<property name="checkstyle.formatted.report" value="${checkstyle.report.dir}/CommonPackage_checkstyle_report.html"/>
	
	<!--Properties set for checkstyle "PMD scans Java source code and looks for potential code problems"-->
	<!--Read for more details http://pmd.sourceforge.net/cpd.html -->
	<property name="pmd.dir" value="${base.dir}/pmd-3.8"/>
	<property name="pmd.report.dir" value="${pmd.dir}/reports"/>
	<property name="pmd.report.html" value="${pmd.report.dir}/Common_Package_PMD_Report.html"/>
	
	<path id="app.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="xdoclet.classpath">
		<path refid="app.classpath"/>
        <pathelement location="${extra_lib.dir}/commons-net-1.2.2.jar"/>
		<pathelement location="${extra_lib.dir}/hibernate-tools.jar"/>
		<pathelement location="${extra_lib.dir}/servlet-api.jar"/>
		<pathelement location="${extra_lib.dir}/xdoclet-1.2.jar"/>
		<pathelement location="${extra_lib.dir}/xdoclet-hibernate-module-1.2.jar"/>
		<pathelement location="${extra_lib.dir}/xdoclet-xdoclet-module-1.2.jar"/>
		<pathelement location="${extra_lib.dir}/xerces.jar"/>
		<pathelement location="${extra_lib.dir}/xjavadoc-1.0.2.jar"/>
		<pathelement location="${extra_lib.dir}/xsdlib.jar"/>
		<pathelement location="${test.dir}" />
	</path>
	
	<path id="junit.classpath">
		<path refid="app.classpath"/>
		<pathelement location="${target.dir}"/>
	</path>
	
	<path id="checkstyle.classpath">
		<pathelement location="${build.dir}/commonpackage.jar"/>
		<pathelement location="${lib.dir}/DynamicExtensions.jar"/>
	</path>	
	<!-- sub tasks -->
	<target name="init">
    	<!-- Create the time stamp -->
	    <tstamp/>
    	<!-- Create the build directory structure used by compile -->
	    <delete dir="${target.dir}"/>
	    <mkdir dir="${target.dir}"/>
	    <mkdir dir="${build.dir}"/>
		<mkdir dir="${applet.dir}"/>
		<delete dir="${junit.dir}"/>
		<mkdir dir="${junit.dir}"/>
		<!-- Create the checkstyle report directory-->
		<delete dir="${checkstyle.report.dir}"/>
		<mkdir dir="${checkstyle.report.dir}"/>
		
		<!-- Create the PMD report directory-->
		<delete dir="${pmd.report.dir}"/>
		<mkdir dir="${pmd.report.dir}"/>
  	</target>
	
	<!-- Compile all files, generated and hand-written -->
    <target name="compile" depends="init">
    	
        <javac destdir="${target.dir}" includes="**/*.*" includeAntRuntime="false">
            <src path="${src.dir}"/>
        	<src path="${test.dir}"/>
            <classpath>
              <fileset dir="${lib.dir}">
                  <include name="*.jar"/>
              </fileset>
            </classpath>       
        </javac>
    	<copy todir="${target.dir}">
    		<fileset dir="${src.dir}">
    			<include name="**/*.properties"/>
    			<include name="**/*.xml"/>
    			<include name="**/*.hbm.xml"/>
    			<include name="**/*.ser"/>
	    	</fileset>
			<fileset dir="${test.dir}">
    			<include name="**/*.properties"/>
    			<include name="**/*.xml"/>
    			<include name="**/*.hbm.xml"/>
    			<include name="**/*.ser"/>
	    	</fileset>
    	</copy>
    </target>

    <target name="compileTest" depends="compile">
    	<mkdir dir="${junit.classes.dir}"/> 
        <javac destdir="${junit.classes.dir}" includes="**/*.*" includeAntRuntime="false">
            <src path="${test.dir}"/>
            <classpath>
              <fileset dir="${lib.dir}">
                  <include name="*.jar"/>
              </fileset>
            	<pathelement location="${target.dir}"/>
            </classpath>       
        </javac>
    </target>
	<!-- Create the Applet JAR Begins-->
  <!--target name="AppletJAR" depends="compile" >
    	<delete>
            <fileset dir="${applet.dir}">
	            <exclude name="**/CVS*"/>
	            <exclude name="**/java.policy.applet*"/>
            </fileset>
        </delete>
        
        <copy todir="${applet.dir}/edu/wustl/common/treeApplet">
        	<fileset dir="${target.dir}/edu/wustl/common/treeApplet">
            	<include name="**/*.class"/>
        	</fileset>
        </copy>
        <copy todir="${applet.dir}/edu/wustl/common/tree">
        	<fileset dir="${target.dir}/edu/wustl/common/tree">
	    	    <include name="**/*.class"/>
    		</fileset>
    	</copy>
		
        <jar taskname="BuildJar" jarfile="${applet.dir}/TreeApplet.jar">
            <fileset dir="${applet.dir}">
	            <exclude name="**/CVS*"/>
	            <exclude name="**/java.policy.applet*"/>
            </fileset>
        </jar>
		
		<delete dir="${applet.dir}/edu"/>
    </target-->
   	<!-- Create the Applet JAR Ends-->
	
	<!-- Compile all files, generated and hand-written -->
    <target name="applet_compile" depends="init" >
    	<delete>
            <fileset dir="${applet.dir}">
	            <exclude name="**/CVS*"/>
	            <exclude name="**/java.policy.applet*"/>
            </fileset>
    	 </delete>
    	
        <javac destdir="${applet.dir}" includeAntRuntime="false" fork="yes" executable="C:/Program Files/Java/jdk1.5.0_05/bin/javac" compiler="javac1.5">
            <src path="${src.dir}"/>
			
			<include name="**/edu/wustl/common/tree/*.java"/>	
        	<include name="**/edu/wustl/common/treeApplet/*.java"/>	
            <classpath>
              <fileset dir="${lib.dir}">
                  <include name="*.jar"/>
              </fileset>
            </classpath>       
        </javac>
    </target>

	<!-- Create the Applet JAR Begins-->
    <target name="AppletJAR" depends="applet_compile" >
            
		<delete>
            <fileset dir="${applet.dir}">
	            <include name="**/*.jar"/>
            </fileset>
        </delete>
    	
    	<copy todir="${applet.dir}/images">	
    		<fileset dir="${base.dir}/images">
	    	    <include name="**/*"/>
    		</fileset>
    	 </copy>

		<copy todir="${applet.dir}">	
    		<fileset dir="${lib.dir}">
	    	    <include name="**/swingx-2006_10_08.jar"/>
    		</fileset>
    	 </copy> 

        <jar taskname="buildJar" jarfile="${applet.dir}/TreeApplet.jar">
		 <manifest>
		      <attribute name="Class-Path" value="swingx-2006_10_08.jar"/>
		   </manifest>
            <fileset dir="${applet.dir}">
	            <exclude name="**/CVS*"/>
	            <exclude name="**/java.policy.applet*"/>
            </fileset>
        </jar>
    </target>
	<!-- Create the Applet JAR Ends-->
	
	
	<!-- Generate the hbm files from the XDoclet -->
    <target name="GenerateHBM" description="Generates Hibernate class descriptor files.">
    	<!-- Define the hibernatedoclet task -->
    	<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
    		<classpath refid="xdoclet.classpath"/>
		</taskdef>
		
		<!-- Execute the hibernatedoclet task -->		
		<hibernatedoclet destdir="${src.dir}" excludedtags="@version,@author,@todo"
					     force="${generateforce}" mergedir="${src.dir}" verbose="false">
			<fileset dir="${src.dir}">
				<include name="**/domain/*.java"/>
				<include name="**/cde/*.java"/>
			</fileset>
    		<hibernate version="2.0"/>
		</hibernatedoclet>	
		
		<!-- Upgrade grammar from Hibernate1 to Hibernate2 -->
	    <replace dir="${src.dir}">
	    	<include name="**/domain/*.hbm.xml"/>
	        <include name="**/cde/*.hbm.xml"/>
	        <replacefilter token="readonly=" value="inverse="/>
	        <replacefilter token="role=" value="name="/>
	        <replacefilter token="hibernate-mapping.dtd" value="hibernate-mapping-2.0.dtd"/>
	    </replace>
	    
	    <copy todir="${hbm.dir}">
	    	<fileset dir="${src.dir}/edu/wustl/common/domain">
	    		<include name="*.hbm.xml"/>
    		</fileset>
	    	<fileset dir="${src.dir}/edu/wustl/common/cde">
	    		<include name="*.hbm.xml"/>
	       	</fileset>
	    </copy>
    	
    	<delete>
            <fileset dir="${src.dir}/edu/wustl/common/domain" includes="*.hbm.xml"/>
    		<fileset dir="${src.dir}/edu/wustl/common/cde" includes="*.hbm.xml"/>
        </delete>
    </target>
	
	<target name="build_code_zip" depends="compile" >
		<zip destfile="${build.dir}/commonpackage-src.zip">
	    	<fileset dir="${src.dir}" includes="**/*"/>
	    </zip>
	</target>
	
	<target name="build_jar" depends="compile" >
        <delete>
            <fileset dir="${build.dir}" includes="**/*"/>
        </delete>
        
        <jar taskname="build_jar" jarfile="${build.dir}/commonpackage.jar">
            <fileset dir="${target.dir}">
            	<include name="**/*"/>
        		<exclude name="**/SqlGeneratorTestCase*"/>
            	<exclude name="**/ExpressionTestCases*"/>
            	<exclude name="**/JoinGraphTestCase*"/>
            </fileset>
			<fileset dir="${base.dir}" includes="**/ExceptionFormatter.properties"/>	
        </jar>
		
		<antcall target="build_code_zip"/>
    </target>
	
	<target name="Generate-Schema" depends="build_jar">
    	<java classname="edu.wustl.common.util.dbManager.GenerateSchema">
    		<arg value="false"/>	
            <classpath>
	            <pathelement location="${build.dir}/catissuecore.jar"/>
            	<fileset dir="${lib.dir}">
                  <include name="*.jar"/>
              	</fileset>
            </classpath>       
      	</java>
    </target>
	
	 <target name="runJunit" depends="compileTest">
	 	<mkdir dir="${junit.report.dir}"/> 
	 	<delete>
	 		<fileset dir="${junit.report.dir}" includes="**/*"/>
	 	</delete>
	    <junit printsummary="yes" haltonerror="no" haltonfailure="no" fork="yes">
		 	<test name="edu.wustl.common.querysuite.TestAll" outfile="${junit.report.dir}/Junit_report_CommonPackage"/>
      		<formatter type="plain"/>
      		<!--batchtest todir="${junit.report.dir}">
      			<fileset dir="${test.dir}">
					<include name="**/TestAll.java"/>
			    </fileset>
			</batchtest-->    
			<classpath>
				<pathelement location="${junit.classes.dir}"/>
				<pathelement location="${target.dir}"/>
				 <fileset dir="${lib.dir}">
	                  <include name="*.jar"/>
				 </fileset>
			</classpath>
		</junit>
	</target>

	<target name="checkstyle" depends="build_jar" description="Generates a report of code convention violations.">
		<taskdef resource="checkstyletask.properties" classpath="${extra_lib.dir}/checkstyle-all-4.2.jar"/>  

	    <checkstyle config="${checkstyle.rules.file}" failureProperty="checkstyle.failed" failOnViolation="false" classpathref="checkstyle.classpath" >
			<formatter type="xml" tofile="${checkstyle.unformatted.report}" />
			<!-- Adding all querysuite packages-->
	    	<fileset dir="${src.dir}" includes="**/querysuite/**/*.java"/>
		</checkstyle>

	    <style in="${checkstyle.unformatted.report}" out="${checkstyle.formatted.report}" style="${checkstyle.report.formatter}"/>
	</target>
	
	<!-- ,,,,,junit,logging-jakarta-commons,logging-java,migrating,,optimizations,strictexception,,,"-->
	<target name="pmd" depends="init" description="PMD scans Java source code and looks for potential code problems.">
		<taskdef name="pmd" classpath="${pmd.dir}/lib/pmd-3.8.jar" classname="net.sourceforge.pmd.ant.PMDTask"/>
		<pmd shortFilenames="true">
			<ruleset>basic</ruleset>
			<ruleset>braces</ruleset>
			<ruleset>clone</ruleset>
			<ruleset>codesize</ruleset>
			<ruleset>controversial</ruleset>
			<ruleset>coupling</ruleset>
			<ruleset>design</ruleset>
			<ruleset>finalizers</ruleset>
			<ruleset>imports</ruleset>
			<ruleset>j2ee</ruleset>			
			<ruleset>migrating</ruleset>
			<ruleset>naming</ruleset>
			<ruleset>strings</ruleset>
			<ruleset>unusedcode</ruleset>
			<ruleset>sunsecure</ruleset>
			<!--ruleset>javabeans</ruleset-->
			
			<formatter type="html" toFile="${pmd.report.html}"/>
			<fileset dir="${src.dir}" includes="**/querysuite/**/*.java"/>
		</pmd>
	</target>
</project>